import 'dart:convert';
import '../../domain/entities/entities.dart';

List<RequestTimeManagerModel> requestTimeManagerModelFromJson(String str) => List<RequestTimeManagerModel>.from(json.decode(str).map((x) => RequestTimeManagerModel.fromJson(x)));

String requestTimeManagerModelToJson(List<RequestTimeManagerModel> data) => json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

class RequestTimeManagerModel extends RequestTimeManager{

  const RequestTimeManagerModel({
    required int? idRequestTime,
    required DateTime? start,
    required DateTime? end,
    required DateTime? workDate,
    required int? idRequestReason,
    required int? idRequestType,
    required String? otherReason,
    required int? idEmp,
    required dynamic isManagerLv1Approve,
    required dynamic isManagerLv2Approve,
    required double? amountHours,
    required double? xOt,
    required double? xOtHoliday,
    required double? xWorkingDailyHoliday,
    required double? xWorkingMonthlyHoliday,
    required int? isActive,
    required int? managerLv1ApproveBy,
    required dynamic managerLv1ApproveDate,
    required int? managerLv2ApproveBy,
    required dynamic managerLv2ApproveDate,
    required int? createBy,
    required DateTime? createDate,
    required int? updateBy,
    required DateTime? updateDate,
    required int? isDoubleApproval,
    required int? approvalLevel,
    required dynamic fillInCreate,
    required dynamic fillInApproveLv1,
    required dynamic fillInApproveLv2,
    required dynamic isWithdraw,
    required dynamic commentManagerLv1,
    required dynamic commentManagerLv2,
    required String? name,
    required String? requestReasonName,
    required int? managerLv1Id,
    required String? managerLv1Name,
    required String? emailManagerLv1,
    required int? managerLv2Id,
    required String? managerLv2Name,
    required String? emailManagerLv2,
    required String? employeeId,
    required String? firstname,
    required String? lastname,
    required int? idCompany,
    required int? idVendor,
    required int? idPositions,
    required String? positionsName,
    required dynamic idDepartment,
    required dynamic departmentName,
    required String? paymentTypeName,
    required String? paymentRound,
    required String? startText,
    required String? endText,
    required String? createDateText,
    required String? workDateText,
  }):super(
    idRequestTime:idRequestTime,
    start:start,
    end:end,
    workDate:workDate,
    idRequestReason:idRequestReason,
    idRequestType:idRequestType,
    otherReason:otherReason,
    idEmp:idEmp,
    isManagerLv1Approve:isManagerLv1Approve,
    isManagerLv2Approve:isManagerLv2Approve,
    amountHours:amountHours,
    xOt:xOt,
    xOtHoliday:xOtHoliday,
    xWorkingDailyHoliday:xWorkingDailyHoliday,
    xWorkingMonthlyHoliday:xWorkingMonthlyHoliday,
    isActive:isActive,
    managerLv1ApproveBy:managerLv1ApproveBy,
    managerLv1ApproveDate:managerLv1ApproveDate,
    managerLv2ApproveBy:managerLv2ApproveBy,
    managerLv2ApproveDate:managerLv2ApproveDate,
    createBy:createBy,
    createDate:createDate,
    updateBy:updateBy,
    updateDate:updateDate,
    isDoubleApproval:isDoubleApproval,
    approvalLevel:approvalLevel,
    fillInCreate:fillInCreate,
    fillInApproveLv1:fillInApproveLv1,
    fillInApproveLv2:fillInApproveLv2,
    isWithdraw:isWithdraw,
    commentManagerLv1:commentManagerLv1,
    commentManagerLv2:commentManagerLv2,
    name:name,
    requestReasonName:requestReasonName,
    managerLv1Id:managerLv1Id,
    managerLv1Name:managerLv1Name,
    emailManagerLv1:emailManagerLv1,
    managerLv2Id:managerLv2Id,
    managerLv2Name:managerLv2Name,
    emailManagerLv2:emailManagerLv2,
    employeeId:employeeId,
    firstname:firstname,
    lastname:lastname,
    idCompany:idCompany,
    idVendor:idVendor,
    idPositions:idPositions,
    positionsName:positionsName,
    idDepartment:idDepartment,
    departmentName:departmentName,
    paymentTypeName:paymentTypeName,
    paymentRound:paymentRound,
    startText:startText,
    endText:endText,
    createDateText:createDateText,
    workDateText:workDateText,
  );

  factory RequestTimeManagerModel.fromJson(Map<String, dynamic> json) => RequestTimeManagerModel(
    idRequestTime: json["idRequestTime"],
    start: json["start"] == null ? null : DateTime.parse(json["start"]),
    end: json["end"] == null ? null : DateTime.parse(json["end"]),
    workDate: json["workDate"] == null ? null : DateTime.parse(json["workDate"]),
    idRequestReason: json["idRequestReason"],
    idRequestType: json["idRequestType"],
    otherReason: json["otherReason"],
    idEmp: json["idEmp"],
    isManagerLv1Approve: json["isManagerLV1Approve"],
    isManagerLv2Approve: json["isManagerLV2Approve"],
    amountHours: json["amountHours"]?.toDouble(),
    xOt: json["xOT"]?.toDouble(),
    xOtHoliday: json["xOTHoliday"]?.toDouble(),
    xWorkingDailyHoliday: json["xWorkingDailyHoliday"]?.toDouble(),
    xWorkingMonthlyHoliday: json["xWorkingMonthlyHoliday"]?.toDouble(),
    isActive: json["isActive"],
    managerLv1ApproveBy: json["managerLV1ApproveBy"],
    managerLv1ApproveDate: json["managerLV1ApproveDate"],
    managerLv2ApproveBy: json["managerLV2ApproveBy"],
    managerLv2ApproveDate: json["managerLV2ApproveDate"],
    createBy: json["createBy"],
    createDate: json["createDate"] == null ? null : DateTime.parse(json["createDate"]),
    updateBy: json["updateBy"],
    updateDate: json["updateDate"] == null ? null : DateTime.parse(json["updateDate"]),
    isDoubleApproval: json["isDoubleApproval"],
    approvalLevel: json["approvalLevel"],
    fillInCreate: json["fillInCreate"],
    fillInApproveLv1: json["fillInApproveLV1"],
    fillInApproveLv2: json["fillInApproveLV2"],
    isWithdraw: json["isWithdraw"],
    commentManagerLv1: json["commentManagerLV1"],
    commentManagerLv2: json["commentManagerLV2"],
    name: json["name"],
    requestReasonName: json["requestReasonName"],
    managerLv1Id: json["managerLV1Id"],
    managerLv1Name: json["managerLV1Name"],
    emailManagerLv1: json["emailManagerLV1"],
    managerLv2Id: json["managerLV2Id"],
    managerLv2Name: json["managerLV2Name"],
    emailManagerLv2: json["emailManagerLV2"],
    employeeId: json["employeeId"],
    firstname: json["firstname"],
    lastname: json["lastname"],
    idCompany: json["idCompany"],
    idVendor: json["idVendor"],
    idPositions: json["idPositions"],
    positionsName: json["positionsName"],
    idDepartment: json["idDepartment"],
    departmentName: json["departmentName"],
    paymentTypeName: json["paymentTypeName"],
    paymentRound: json["paymentRound"],
    startText: json["startText"],
    endText: json["endText"],
    createDateText: json["createDateText"],
    workDateText: json["workDateText"],
  );

  Map<String, dynamic> toJson() => {
    "idRequestTime": idRequestTime,
    "start": start?.toIso8601String(),
    "end": end?.toIso8601String(),
    "workDate": workDate?.toIso8601String(),
    "idRequestReason": idRequestReason,
    "idRequestType": idRequestType,
    "otherReason": otherReason,
    "idEmp": idEmp,
    "isManagerLV1Approve": isManagerLv1Approve,
    "isManagerLV2Approve": isManagerLv2Approve,
    "amountHours": amountHours,
    "xOT": xOt,
    "xOTHoliday": xOtHoliday,
    "xWorkingDailyHoliday": xWorkingDailyHoliday,
    "xWorkingMonthlyHoliday": xWorkingMonthlyHoliday,
    "isActive": isActive,
    "managerLV1ApproveBy": managerLv1ApproveBy,
    "managerLV1ApproveDate": managerLv1ApproveDate,
    "managerLV2ApproveBy": managerLv2ApproveBy,
    "managerLV2ApproveDate": managerLv2ApproveDate,
    "createBy": createBy,
    "createDate": createDate?.toIso8601String(),
    "updateBy": updateBy,
    "updateDate": updateDate?.toIso8601String(),
    "isDoubleApproval": isDoubleApproval,
    "approvalLevel": approvalLevel,
    "fillInCreate": fillInCreate,
    "fillInApproveLV1": fillInApproveLv1,
    "fillInApproveLV2": fillInApproveLv2,
    "isWithdraw": isWithdraw,
    "commentManagerLV1": commentManagerLv1,
    "commentManagerLV2": commentManagerLv2,
    "name": name,
    "requestReasonName": requestReasonName,
    "managerLV1Id": managerLv1Id,
    "managerLV1Name": managerLv1Name,
    "emailManagerLV1": emailManagerLv1,
    "managerLV2Id": managerLv2Id,
    "managerLV2Name": managerLv2Name,
    "emailManagerLV2": emailManagerLv2,
    "employeeId": employeeId,
    "firstname": firstname,
    "lastname": lastname,
    "idCompany": idCompany,
    "idVendor": idVendor,
    "idPositions": idPositions,
    "positionsName": positionsName,
    "idDepartment": idDepartment,
    "departmentName": departmentName,
    "paymentTypeName": paymentTypeName,
    "paymentRound": paymentRound,
    "startText": startText,
    "endText": endText,
    "createDateText": createDateText,
    "workDateText": workDateText,
  };
}
