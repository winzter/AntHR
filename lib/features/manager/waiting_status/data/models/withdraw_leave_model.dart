import 'dart:convert';
import '../../domain/entities/withdraw_leave_manager_entity.dart';

List<WithdrawLeaveManagerModel> withdrawManagerFromJson(String str) => List<WithdrawLeaveManagerModel>.from(json.decode(str).map((x) => WithdrawLeaveManagerModel.fromJson(x)));

String withdrawManagerToJson(List<WithdrawLeaveManagerModel> data) => json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

class WithdrawLeaveManagerModel extends WithdrawLeaveManager{


  const WithdrawLeaveManagerModel({
    required int? idLeaveEmployeesWithdraw,
    required int? idLeave,
    required int? managerApprove,
    required int? isApprove,
    required DateTime? approveDate,
    required dynamic fillInCreate,
    required dynamic fillInApprove,
    required DateTime? createDate,
    required int? isActive,
    required dynamic commentManager,
    required int? idLeaveType,
    required String? name,
    required DateTime? start,
    required DateTime? end,
    required int? isFullDay,
    required String? managerName,
    required String? managerEmail,
    required String? firstname,
    required String? lastname,
    required String? positionsName,
    required String? startText,
    required String? endText,
    required String? createDateText,
  }):super(
    idLeaveEmployeesWithdraw:idLeaveEmployeesWithdraw,
    idLeave:idLeave,
    managerApprove:managerApprove,
    isApprove:isApprove,
    approveDate:approveDate,
    fillInCreate:fillInCreate,
    fillInApprove:fillInApprove,
    createDate:createDate,
    isActive:isActive,
    commentManager:commentManager,
    idLeaveType:idLeaveType,
    name:name,
    start:start,
    end:end,
    isFullDay:isFullDay,
    managerName:managerName,
    managerEmail:managerEmail,
    firstname:firstname,
    lastname:lastname,
    positionsName:positionsName,
    startText:startText,
    endText:endText,
    createDateText:createDateText,
  );

  factory WithdrawLeaveManagerModel.fromJson(Map<String, dynamic> json) => WithdrawLeaveManagerModel(
    idLeaveEmployeesWithdraw: json["idLeaveEmployeesWithdraw"],
    idLeave: json["idLeave"],
    managerApprove: json["managerApprove"],
    isApprove: json["isApprove"],
    approveDate: json["approveDate"] == null ? null : DateTime.parse(json["approveDate"]),
    fillInCreate: json["fillInCreate"],
    fillInApprove: json["fillInApprove"],
    createDate: json["createDate"] == null ? null : DateTime.parse(json["createDate"]),
    isActive: json["isActive"],
    commentManager: json["commentManager"],
    idLeaveType: json["idLeaveType"],
    name: json["name"],
    start: json["start"] == null ? null : DateTime.parse(json["start"]),
    end: json["end"] == null ? null : DateTime.parse(json["end"]),
    isFullDay: json["isFullDay"],
    managerName: json["managerName"],
    managerEmail: json["managerEmail"],
    firstname: json["firstname"],
    lastname: json["lastname"],
    positionsName: json["positionsName"],
    startText: json["startText"],
    endText: json["endText"],
    createDateText: json["createDateText"],
  );

  Map<String, dynamic> toJson() => {
    "idLeaveEmployeesWithdraw": idLeaveEmployeesWithdraw,
    "idLeave": idLeave,
    "managerApprove": managerApprove,
    "isApprove": isApprove,
    "approveDate": approveDate?.toIso8601String(),
    "fillInCreate": fillInCreate,
    "fillInApprove": fillInApprove,
    "createDate": createDate?.toIso8601String(),
    "isActive": isActive,
    "commentManager": commentManager,
    "idLeaveType": idLeaveType,
    "name": name,
    "start": start?.toIso8601String(),
    "end": end?.toIso8601String(),
    "isFullDay": isFullDay,
    "managerName": managerName,
    "managerEmail": managerEmail,
    "firstname": firstname,
    "lastname": lastname,
    "positionsName": positionsName,
    "startText": startText,
    "endText": endText,
    "createDateText": createDateText,
  };
}
