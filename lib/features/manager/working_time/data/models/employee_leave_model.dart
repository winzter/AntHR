import 'dart:convert';
import '../../domain/entities/entities.dart';

List<EmployeesLeaveModel> employeesLeaveModelFromJson(String str) => List<EmployeesLeaveModel>.from(json.decode(str).map((x) => EmployeesLeaveModel.fromJson(x)));

String employeesLeaveModelToJson(List<EmployeesLeaveModel> data) => json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

class EmployeesLeaveModel extends EmployeesLeaveEntity{


  const EmployeesLeaveModel({
    required int? idEmp,
    required String? firstname,
    required String? lastname,
    required String? name,
    required int? idLeave,
    required int? idLeaveType,
    required String? description,
    required DateTime? start,
    required DateTime? end,
    required double? used,
    required int? quota,
    required double? balance,
    required double? remaining,
    required int? idManagerEmployee,
    required DateTime? approveDate,
    required int? isApprove,
    required int? isFullDay,
    required dynamic workingStart,
    required dynamic workingEnd,
    required int? isActive,
    required DateTime? createDate,
    required dynamic isWithdraw,
    required dynamic filename,
    required dynamic commentManager,
    required String? positionsName,
  }):super(
    idEmp:idEmp,
    firstname:firstname,
    lastname:lastname,
    name:name,
    idLeave:idLeave,
    idLeaveType:idLeaveType,
    description:description,
    start:start,
    end:end,
    used:used,
    quota:quota,
    balance:balance,
    remaining:remaining,
    idManagerEmployee:idManagerEmployee,
    approveDate:approveDate,
    isApprove:isApprove,
    isFullDay:isFullDay,
    workingStart:workingStart,
    workingEnd:workingEnd,
    isActive:isActive,
    createDate:createDate,
    isWithdraw:isWithdraw,
    filename:filename,
    commentManager:commentManager,
    positionsName:positionsName,
  );

  factory EmployeesLeaveModel.fromJson(Map<String, dynamic> json) => EmployeesLeaveModel(
    idEmp: json["idEmp"],
    firstname: json["firstname"],
    lastname: json["lastname"],
    name: json["name"],
    idLeave: json["idLeave"],
    idLeaveType: json["idLeaveType"],
    description: json["description"],
    start: json["start"] == null ? null : DateTime.parse(json["start"]),
    end: json["end"] == null ? null : DateTime.parse(json["end"]),
    used: json["used"]?.toDouble(),
    quota: json["quota"],
    balance: json["balance"]?.toDouble(),
    remaining: json["remaining"]?.toDouble(),
    idManagerEmployee: json["idManagerEmployee"],
    approveDate: json["approveDate"] == null ? null : DateTime.parse(json["approveDate"]),
    isApprove: json["isApprove"],
    isFullDay: json["isFullDay"],
    workingStart: json["workingStart"],
    workingEnd: json["workingEnd"],
    isActive: json["isActive"],
    createDate: json["createDate"] == null ? null : DateTime.parse(json["createDate"]),
    isWithdraw: json["isWithdraw"],
    filename: json["filename"],
    commentManager: json["commentManager"],
    positionsName: json["positionsName"],
  );

  Map<String, dynamic> toJson() => {
    "idEmp": idEmp,
    "firstname": firstname,
    "lastname": lastname,
    "name": name,
    "idLeave": idLeave,
    "idLeaveType": idLeaveType,
    "description": description,
    "start": start?.toIso8601String(),
    "end": end?.toIso8601String(),
    "used": used,
    "quota": quota,
    "balance": balance,
    "remaining": remaining,
    "idManagerEmployee": idManagerEmployee,
    "approveDate": approveDate?.toIso8601String(),
    "isApprove": isApprove,
    "isFullDay": isFullDay,
    "workingStart": workingStart,
    "workingEnd": workingEnd,
    "isActive": isActive,
    "createDate": createDate?.toIso8601String(),
    "isWithdraw": isWithdraw,
    "filename": filename,
    "commentManager": commentManager,
    "positionsName": positionsName,
  };
}
