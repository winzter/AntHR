import 'dart:convert';
import '../../domain/entities/entities.dart';

List<PayrollSettingModel> payrollSettingEntityFromJson(String str) => List<PayrollSettingModel>.from(json.decode(str).map((x) => PayrollSettingModel.fromJson(x)));

// String payrollSettingEntityToJson(List<PayrollSettingModel> data) => json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

class PayrollSettingModel extends PayrollSettingEntity{

  const PayrollSettingModel({
    required int? idPayrollSetting,
    required int? idVendor,
    required dynamic idCompany,
    required int? xWorkingDailyHoliday,
    required int? xWorkingMonthlyHoliday,
    required double? xOt,
    required int? xOtHoliday,
    required dynamic morningShiftFee,
    required dynamic afternoonShiftFee,
    required dynamic nightShiftFee,
    required int? delayTimes,
    required String? decimalRounding,
    required int? decimalNumber,
    required String? paymentPeriod,
    required int? firstCutOff,
    required int? secondCutOff,
    required int? firstPayDate,
    required int? secondPayDate,
    required int? earlyCheckIn,
    required int? firstPayslipDate,
    required String? firstPayslipTime,
    required int? secondPayslipDate,
    required String? secondPayslipTime,
    required int? firstAddition,
    required int? secondAddition,
    required int? firstDeduction,
    required int? secondDeduction,
    required dynamic xWorkingDailyHolidayBilling,
    required dynamic xWorkingMonthlyHolidayBilling,
    required dynamic xOtBilling,
    required dynamic xOtHolidayBilling,
    required List<Payment>? payment,
  }):super(
    idPayrollSetting:idPayrollSetting,
    idVendor:idVendor,
    idCompany:idCompany,
    xWorkingDailyHoliday:xWorkingDailyHoliday,
    xWorkingMonthlyHoliday:xWorkingMonthlyHoliday,
    xOt:xOt,
    xOtHoliday:xOtHoliday,
    morningShiftFee:morningShiftFee,
    afternoonShiftFee:afternoonShiftFee,
    nightShiftFee:nightShiftFee,
    delayTimes:delayTimes,
    decimalRounding:decimalRounding,
    decimalNumber:decimalNumber,
    paymentPeriod:paymentPeriod,
    firstCutOff:firstCutOff,
    secondCutOff:secondCutOff,
    firstPayDate:firstPayDate,
    secondPayDate:secondPayDate,
    earlyCheckIn:earlyCheckIn,
    firstPayslipDate:firstPayslipDate,
    firstPayslipTime:firstPayslipTime,
    secondPayslipDate:secondPayslipDate,
    secondPayslipTime:secondPayslipTime,
    firstAddition:firstAddition,
    secondAddition:secondAddition,
    firstDeduction:firstDeduction,
    secondDeduction:secondDeduction,
    xWorkingDailyHolidayBilling:xWorkingDailyHolidayBilling,
    xWorkingMonthlyHolidayBilling:xWorkingMonthlyHolidayBilling,
    xOtBilling:xOtBilling,
    xOtHolidayBilling:xOtHolidayBilling,
    payment:payment,
  );

  factory PayrollSettingModel.fromJson(Map<String, dynamic> json) => PayrollSettingModel(
    idPayrollSetting: json["idPayrollSetting"],
    idVendor: json["idVendor"],
    idCompany: json["idCompany"],
    xWorkingDailyHoliday: json["xWorkingDailyHoliday"],
    xWorkingMonthlyHoliday: json["xWorkingMonthlyHoliday"],
    xOt: json["xOT"]?.toDouble(),
    xOtHoliday: json["xOTHoliday"],
    morningShiftFee: json["morningShiftFee"],
    afternoonShiftFee: json["afternoonShiftFee"],
    nightShiftFee: json["nightShiftFee"],
    delayTimes: json["delayTimes"],
    decimalRounding: json["decimalRounding"],
    decimalNumber: json["decimalNumber"],
    paymentPeriod: json["paymentPeriod"],
    firstCutOff: json["firstCutOff"],
    secondCutOff: json["secondCutOff"],
    firstPayDate: json["firstPayDate"],
    secondPayDate: json["secondPayDate"],
    earlyCheckIn: json["earlyCheckIn"],
    firstPayslipDate: json["firstPayslipDate"],
    firstPayslipTime: json["firstPayslipTime"],
    secondPayslipDate: json["secondPayslipDate"],
    secondPayslipTime: json["secondPayslipTime"],
    firstAddition: json["firstAddition"],
    secondAddition: json["secondAddition"],
    firstDeduction: json["firstDeduction"],
    secondDeduction: json["secondDeduction"],
    xWorkingDailyHolidayBilling: json["xWorkingDailyHolidayBilling"],
    xWorkingMonthlyHolidayBilling: json["xWorkingMonthlyHolidayBilling"],
    xOtBilling: json["xOTBilling"],
    xOtHolidayBilling: json["xOTHolidayBilling"],
    payment: json["payment"] == null ? [] : List<Payment>.from(json["payment"]!.map((x) => PaymentModel.fromJson(x))),
  );

  // Map<String, dynamic> toJson() => {
  //   "idPayrollSetting": idPayrollSetting,
  //   "idVendor": idVendor,
  //   "idCompany": idCompany,
  //   "xWorkingDailyHoliday": xWorkingDailyHoliday,
  //   "xWorkingMonthlyHoliday": xWorkingMonthlyHoliday,
  //   "xOT": xOt,
  //   "xOTHoliday": xOtHoliday,
  //   "morningShiftFee": morningShiftFee,
  //   "afternoonShiftFee": afternoonShiftFee,
  //   "nightShiftFee": nightShiftFee,
  //   "delayTimes": delayTimes,
  //   "decimalRounding": decimalRounding,
  //   "decimalNumber": decimalNumber,
  //   "paymentPeriod": paymentPeriod,
  //   "firstCutOff": firstCutOff,
  //   "secondCutOff": secondCutOff,
  //   "firstPayDate": firstPayDate,
  //   "secondPayDate": secondPayDate,
  //   "earlyCheckIn": earlyCheckIn,
  //   "firstPayslipDate": firstPayslipDate,
  //   "firstPayslipTime": firstPayslipTime,
  //   "secondPayslipDate": secondPayslipDate,
  //   "secondPayslipTime": secondPayslipTime,
  //   "firstAddition": firstAddition,
  //   "secondAddition": secondAddition,
  //   "firstDeduction": firstDeduction,
  //   "secondDeduction": secondDeduction,
  //   "xWorkingDailyHolidayBilling": xWorkingDailyHolidayBilling,
  //   "xWorkingMonthlyHolidayBilling": xWorkingMonthlyHolidayBilling,
  //   "xOTBilling": xOtBilling,
  //   "xOTHolidayBilling": xOtHolidayBilling,
  //   "payment": payment == null ? [] : List<dynamic>.from(payment!.map((x) => x.toJson())),
  // };
}

class PaymentModel extends Payment{

  const PaymentModel({
    required int? idPayrollPayment,
    required int? idPayrollSetting,
    required int? idPaymentType,
    required String? working,
    required String? ot,
    required int? isWorkingOmit,
    required int? isOtOmit,
  }):super(
    idPayrollPayment:idPayrollPayment,
    idPayrollSetting:idPayrollSetting,
    idPaymentType:idPaymentType,
    working:working,
    ot:ot,
    isWorkingOmit:isWorkingOmit,
    isOtOmit:isOtOmit,
  );

  factory PaymentModel.fromJson(Map<String, dynamic> json) => PaymentModel(
    idPayrollPayment: json["idPayrollPayment"],
    idPayrollSetting: json["idPayrollSetting"],
    idPaymentType: json["idPaymentType"],
    working: json["working"],
    ot: json["ot"],
    isWorkingOmit: json["isWorkingOmit"],
    isOtOmit: json["isOtOmit"],
  );

  Map<String, dynamic> toJson() => {
    "idPayrollPayment": idPayrollPayment,
    "idPayrollSetting": idPayrollSetting,
    "idPaymentType": idPaymentType,
    "working": working,
    "ot": ot,
    "isWorkingOmit": isWorkingOmit,
    "isOtOmit": isOtOmit,
  };
}
