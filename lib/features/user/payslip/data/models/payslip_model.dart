import 'dart:convert';
import '../../domain/entities/payslip.dart';

List<PayslipModel> payslipFromJson(String str) => List<PayslipModel>.from(
    json.decode(str).map((x) => PayslipModel.fromJson(x)));

String payslipToJson(List<PayslipModel> data) =>
    json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

class PayslipModel extends PayslipEntity {
  const PayslipModel({
    required String? employeeId,
    required String? title,
    required String? firstname,
    required String? lastname,
    required String? bookBankId,
    required int? idPositions,
    required String? positionsName,
    required dynamic idDepartment,
    required dynamic departmentName,
    required int? idPayrunDetail,
    required int? idPayrun,
    required int? idEmp,
    required int? workingDay,
    required double? totalOt,
    required double? totalAdditions,
    required double? totalEarnings,
    required double? totalDeductions,
    required double? net,
    required dynamic otRate,
    required String? paymentType,
    required DateTime? monthPeriod,
    required DateTime? payDate,
    required dynamic chargeSalary,
    required dynamic chargeOt,
    required dynamic chargeCost,
    required dynamic chargeCompensated,
    required int? isCheck,
    required int? idCompany,
    required int? idVendor,
    required double? ytdIrregular,
    required double? accumulateEarnings,
    required double? accumulateTax,
    required double? accumulateSso,
    required double? accumulatePf,
    required dynamic start,
    required dynamic end,
    required String? vendorName,
    required String? sectionName,
    required int? round,
    required String? companyName,
    required List<TionModel>? addition,
    required List<TionModel>? deduction,
  }) : super(
          employeeId: employeeId,
          title: title,
          firstname: firstname,
          lastname: lastname,
          bookBankId: bookBankId,
          idPositions: idPositions,
          positionsName: positionsName,
          idDepartment: idDepartment,
          departmentName: departmentName,
          idPayrunDetail: idPayrunDetail,
          idPayrun: idPayrun,
          idEmp: idEmp,
          workingDay: workingDay,
          totalOt: totalOt,
          totalAdditions: totalAdditions,
          totalEarnings: totalEarnings,
          totalDeductions: totalDeductions,
          net: net,
          otRate: otRate,
          paymentType: paymentType,
          monthPeriod: monthPeriod,
          payDate: payDate,
          chargeSalary: chargeSalary,
          chargeOt: chargeOt,
          chargeCost: chargeCost,
          chargeCompensated: chargeCompensated,
          isCheck: isCheck,
          idCompany: idCompany,
          idVendor: idVendor,
          ytdIrregular: ytdIrregular,
          accumulateEarnings: accumulateEarnings,
          accumulateTax: accumulateTax,
          accumulateSso: accumulateSso,
          accumulatePf: accumulatePf,
          start: start,
          end: end,
          vendorName: vendorName,
          sectionName: sectionName,
          round: round,
          companyName: companyName,
          addition: addition,
          deduction: deduction,
        );

  factory PayslipModel.fromJson(Map<String, dynamic> json) => PayslipModel(
        employeeId: json["employeeId"],
        title: json["title"],
        firstname: json["firstname"],
        lastname: json["lastname"],
        bookBankId: json["bookBankId"],
        idPositions: json["idPositions"],
        positionsName: json["positionsName"],
        idDepartment: json["idDepartment"],
        departmentName: json["departmentName"],
        idPayrunDetail: json["idPayrunDetail"],
        idPayrun: json["idPayrun"],
        idEmp: json["idEmp"],
        workingDay: json["workingDay"],
        totalOt: json["totalOT"]?.toDouble(),
        totalAdditions: json["totalAdditions"]?.toDouble(),
        totalEarnings: json["totalEarnings"]?.toDouble(),
        totalDeductions: json["totalDeductions"]?.toDouble(),
        net: json["net"]?.toDouble(),
        otRate: json["otRate"],
        paymentType: json["paymentType"],
        monthPeriod: json["monthPeriod"] == null
            ? null
            : DateTime.parse(json["monthPeriod"]),
        payDate:
            json["payDate"] == null ? null : DateTime.parse(json["payDate"]),
        chargeSalary: json["chargeSalary"],
        chargeOt: json["chargeOT"],
        chargeCost: json["chargeCost"],
        chargeCompensated: json["chargeCompensated"],
        isCheck: json["isCheck"],
        idCompany: json["idCompany"],
        idVendor: json["idVendor"],
        ytdIrregular: json["ytdIrregular"]?.toDouble(),
        accumulateEarnings: json["accumulateEarnings"]?.toDouble(),
        accumulateTax: json["accumulateTax"]?.toDouble(),
        accumulateSso: json["accumulateSSO"]?.toDouble(),
        accumulatePf: json["accumulatePF"]?.toDouble(),
        start: json["start"],
        end: json["end"],
        vendorName: json["vendorName"],
        sectionName: json["sectionName"],
        round: json["round"],
        companyName: json["companyName"],
        addition: json["addition"] == null
            ? []
            : List<TionModel>.from(
                json["addition"]!.map((x) => TionModel.fromJson(x))),
        deduction: json["deduction"] == null
            ? []
            : List<TionModel>.from(
                json["deduction"]!.map((x) => TionModel.fromJson(x))),
      );

  Map<String, dynamic> toJson() => {
        "employeeId": employeeId,
        "title": title,
        "firstname": firstname,
        "lastname": lastname,
        "bookBankId": bookBankId,
        "idPositions": idPositions,
        "positionsName": positionsName,
        "idDepartment": idDepartment,
        "departmentName": departmentName,
        "idPayrunDetail": idPayrunDetail,
        "idPayrun": idPayrun,
        "idEmp": idEmp,
        "workingDay": workingDay,
        "totalOT": totalOt,
        "totalAdditions": totalAdditions,
        "totalEarnings": totalEarnings,
        "totalDeductions": totalDeductions,
        "net": net,
        "otRate": otRate,
        "paymentType": paymentType,
        "monthPeriod": monthPeriod?.toIso8601String(),
        "payDate": payDate?.toIso8601String(),
        "chargeSalary": chargeSalary,
        "chargeOT": chargeOt,
        "chargeCost": chargeCost,
        "chargeCompensated": chargeCompensated,
        "isCheck": isCheck,
        "idCompany": idCompany,
        "idVendor": idVendor,
        "ytdIrregular": ytdIrregular,
        "accumulateEarnings": accumulateEarnings,
        "accumulateTax": accumulateTax,
        "accumulateSSO": accumulateSso,
        "accumulatePF": accumulatePf,
        "start": start,
        "end": end,
        "vendorName": vendorName,
        "sectionName": sectionName,
        "round": round,
        "companyName": companyName,
        "addition": addition == null
            ? []
            : List<dynamic>.from(addition!.map((x) => x.toJson())),
        "deduction": deduction == null
            ? []
            : List<dynamic>.from(deduction!.map((x) => x.toJson())),
      };
}

class TionModel extends TionEntity {
  const TionModel({
    required idPayrunDetailMain,
    required idEmp,
    required idPayrun,
    required idPayrunDetail,
    required idPayrollType,
    required value,
    required valueHour,
    required valueActual,
    required payround,
    required payrunDetailMaincol,
    required name,
    required isAddition,
    required showOnPayslip,
    required payroundText,
    required idPayrunDetailAddition,
    required idAddition,
    required idPayrunDetailDeduction,
    required idDeduction,
  }) : super(
          idPayrunDetailMain: idPayrunDetailMain,
          idEmp: idEmp,
          idPayrun: idPayrun,
          idPayrunDetail: idPayrunDetail,
          idPayrollType: idPayrollType,
          value: value,
          valueHour: valueHour,
          valueActual: valueActual,
          payround: payround,
          payrunDetailMaincol: payrunDetailMaincol,
          name: name,
          isAddition: isAddition,
          showOnPayslip: showOnPayslip,
          payroundText: payroundText,
          idPayrunDetailAddition: idPayrunDetailAddition,
          idAddition: idAddition,
          idPayrunDetailDeduction: idPayrunDetailDeduction,
          idDeduction: idDeduction,
        );

  factory TionModel.fromJson(Map<String, dynamic> json) => TionModel(
        idPayrunDetailMain: json["idPayrunDetailMain"],
        idEmp: json["idEmp"],
        idPayrun: json["idPayrun"],
        idPayrunDetail: json["idPayrunDetail"],
        idPayrollType: json["idPayrollType"],
        value: json["value"]?.toDouble(),
        valueHour: json["valueHour"]?.toDouble(),
        valueActual: json["valueActual"],
        payround:
            json["payround"] == null ? null : DateTime.parse(json["payround"]),
        payrunDetailMaincol: json["PayrunDetailMaincol"],
        name: json["name"],
        isAddition: json["isAddition"],
        showOnPayslip: json["showOnPayslip"],
        payroundText: json["payroundText"],
        idPayrunDetailAddition: json["idPayrunDetailAddition"],
        idAddition: json["idAddition"],
        idPayrunDetailDeduction: json["idPayrunDetailDeduction"],
        idDeduction: json["idDeduction"],
      );

  Map<String, dynamic> toJson() => {
        "idPayrunDetailMain": idPayrunDetailMain,
        "idEmp": idEmp,
        "idPayrun": idPayrun,
        "idPayrunDetail": idPayrunDetail,
        "idPayrollType": idPayrollType,
        "value": value,
        "valueHour": valueHour,
        "valueActual": valueActual,
        "payround": payround?.toIso8601String(),
        "PayrunDetailMaincol": payrunDetailMaincol,
        "name": name,
        "isAddition": isAddition,
        "showOnPayslip": showOnPayslip,
        "payroundText": payroundText,
        "idPayrunDetailAddition": idPayrunDetailAddition,
        "idAddition": idAddition,
        "idPayrunDetailDeduction": idPayrunDetailDeduction,
        "idDeduction": idDeduction,
      };
}
