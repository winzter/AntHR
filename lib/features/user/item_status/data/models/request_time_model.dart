import 'dart:convert';
import '../../domain/entities/entities.dart';

List<RequestTimeModel> requestTimeFromJson(String str) =>
    List<RequestTimeModel>.from(
        json.decode(str).map((x) => RequestTimeModel.fromJson(x)));

String requestTimeToJson(List<RequestTimeModel> data) =>
    json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

class RequestTimeModel extends RequestTimeEntity {
  const RequestTimeModel({
    required int? idRequestTime,
    required DateTime? start,
    required DateTime? end,
    required DateTime? workDate,
    required int? idRequestReason,
    required int? idRequestType,
    required String? otherReason,
    required int? idEmp,
    required dynamic isManagerLv1Approve,
    required dynamic isManagerLv2Approve,
    required int? amountHours,
    required int? xOt,
    required int? xOtHoliday,
    required int? xWorkingDailyHoliday,
    required int? xWorkingMonthlyHoliday,
    required int? isActive,
    required int? managerLv1ApproveBy,
    required dynamic managerLv1ApproveDate,
    required int? managerLv2ApproveBy,
    required dynamic managerLv2ApproveDate,
    required int? createBy,
    required DateTime? createDate,
    required int? updateBy,
    required DateTime? updateDate,
    required int? isDoubleApproval,
    required int? approvalLevel,
    required dynamic fillInCreate,
    required dynamic fillInApproveLv1,
    required dynamic fillInApproveLv2,
    required dynamic isWithdraw,
    required dynamic commentManagerLv1,
    required dynamic commentManagerLv2,
    required String? name,
    required String? reasonName,
    required int? idVendor,
    required int? managerLv1Id,
    required String? managerLv1Name,
    required String? emailManagerLv1,
    required int? managerLv2Id,
    required String? managerLv2Name,
    required String? emailManagerLv2,
    required String? startText,
    required String? endText,
    required String? createDateText,
    required String? workDateText,
    required dynamic managerLv1ApproveDateText,
    required dynamic managerLv2ApproveDateText,
  }) : super(
          idRequestTime: idRequestTime,
          start: start,
          end: end,
          workDate: workDate,
          idRequestReason: idRequestReason,
          idRequestType: idRequestType,
          otherReason: otherReason,
          idEmp: idEmp,
          isManagerLv1Approve: isManagerLv1Approve,
          isManagerLv2Approve: isManagerLv2Approve,
          amountHours: amountHours,
          xOt: xOt,
          xOtHoliday: xOtHoliday,
          xWorkingDailyHoliday: xWorkingDailyHoliday,
          xWorkingMonthlyHoliday: xWorkingMonthlyHoliday,
          isActive: isActive,
          managerLv1ApproveBy: managerLv1ApproveBy,
          managerLv1ApproveDate: managerLv1ApproveDate,
          managerLv2ApproveBy: managerLv2ApproveBy,
          managerLv2ApproveDate: managerLv2ApproveDate,
          createBy: createBy,
          createDate: createDate,
          updateBy: updateBy,
          updateDate: updateDate,
          isDoubleApproval: isDoubleApproval,
          approvalLevel: approvalLevel,
          fillInCreate: fillInCreate,
          fillInApproveLv1: fillInApproveLv1,
          fillInApproveLv2: fillInApproveLv2,
          isWithdraw: isWithdraw,
          commentManagerLv1: commentManagerLv1,
          commentManagerLv2: commentManagerLv2,
          name: name,
          reasonName: reasonName,
          idVendor: idVendor,
          managerLv1Id: managerLv1Id,
          managerLv1Name: managerLv1Name,
          emailManagerLv1: emailManagerLv1,
          managerLv2Id: managerLv2Id,
          managerLv2Name: managerLv2Name,
          emailManagerLv2: emailManagerLv2,
          startText: startText,
          endText: endText,
          createDateText: createDateText,
          workDateText: workDateText,
          managerLv1ApproveDateText: managerLv1ApproveDateText,
          managerLv2ApproveDateText: managerLv2ApproveDateText,
        );

  factory RequestTimeModel.fromJson(Map<String, dynamic> json) =>
      RequestTimeModel(
        idRequestTime: json["idRequestTime"],
        start: json["start"] == null ? null : DateTime.parse(json["start"]),
        end: json["end"] == null ? null : DateTime.parse(json["end"]),
        workDate:
            json["workDate"] == null ? null : DateTime.parse(json["workDate"]),
        idRequestReason: json["idRequestReason"],
        idRequestType: json["idRequestType"],
        otherReason: json["otherReason"],
        idEmp: json["idEmp"],
        isManagerLv1Approve: json["isManagerLV1Approve"],
        isManagerLv2Approve: json["isManagerLV2Approve"],
        amountHours: json["amountHours"],
        xOt: json["xOT"],
        xOtHoliday: json["xOTHoliday"],
        xWorkingDailyHoliday: json["xWorkingDailyHoliday"],
        xWorkingMonthlyHoliday: json["xWorkingMonthlyHoliday"],
        isActive: json["isActive"],
        managerLv1ApproveBy: json["managerLV1ApproveBy"],
        managerLv1ApproveDate: json["managerLV1ApproveDate"],
        managerLv2ApproveBy: json["managerLV2ApproveBy"],
        managerLv2ApproveDate: json["managerLV2ApproveDate"],
        createBy: json["createBy"],
        createDate: json["createDate"] == null
            ? null
            : DateTime.parse(json["createDate"]),
        updateBy: json["updateBy"],
        updateDate: json["updateDate"] == null
            ? null
            : DateTime.parse(json["updateDate"]),
        isDoubleApproval: json["isDoubleApproval"],
        approvalLevel: json["approvalLevel"],
        fillInCreate: json["fillInCreate"],
        fillInApproveLv1: json["fillInApproveLV1"],
        fillInApproveLv2: json["fillInApproveLV2"],
        isWithdraw: json["isWithdraw"],
        commentManagerLv1: json["commentManagerLV1"],
        commentManagerLv2: json["commentManagerLV2"],
        name: json["name"],
        reasonName: json["reasonName"],
        idVendor: json["idVendor"],
        managerLv1Id: json["managerLV1Id"],
        managerLv1Name: json["managerLV1Name"],
        emailManagerLv1: json["emailManagerLV1"],
        managerLv2Id: json["managerLV2Id"],
        managerLv2Name: json["managerLV2Name"],
        emailManagerLv2: json["emailManagerLV2"],
        startText: json["startText"],
        endText: json["endText"],
        createDateText: json["createDateText"],
        workDateText: json["workDateText"],
        managerLv1ApproveDateText: json["managerLV1ApproveDateText"],
        managerLv2ApproveDateText: json["managerLV2ApproveDateText"],
      );

  Map<String, dynamic> toJson() => {
        "idRequestTime": idRequestTime,
        "start": start?.toIso8601String(),
        "end": end?.toIso8601String(),
        "workDate": workDate?.toIso8601String(),
        "idRequestReason": idRequestReason,
        "idRequestType": idRequestType,
        "otherReason": otherReason,
        "idEmp": idEmp,
        "isManagerLV1Approve": isManagerLv1Approve,
        "isManagerLV2Approve": isManagerLv2Approve,
        "amountHours": amountHours,
        "xOT": xOt,
        "xOTHoliday": xOtHoliday,
        "xWorkingDailyHoliday": xWorkingDailyHoliday,
        "xWorkingMonthlyHoliday": xWorkingMonthlyHoliday,
        "isActive": isActive,
        "managerLV1ApproveBy": managerLv1ApproveBy,
        "managerLV1ApproveDate": managerLv1ApproveDate,
        "managerLV2ApproveBy": managerLv2ApproveBy,
        "managerLV2ApproveDate": managerLv2ApproveDate,
        "createBy": createBy,
        "createDate": createDate?.toIso8601String(),
        "updateBy": updateBy,
        "updateDate": updateDate?.toIso8601String(),
        "isDoubleApproval": isDoubleApproval,
        "approvalLevel": approvalLevel,
        "fillInCreate": fillInCreate,
        "fillInApproveLV1": fillInApproveLv1,
        "fillInApproveLV2": fillInApproveLv2,
        "isWithdraw": isWithdraw,
        "commentManagerLV1": commentManagerLv1,
        "commentManagerLV2": commentManagerLv2,
        "name": name,
        "reasonName": reasonName,
        "idVendor": idVendor,
        "managerLV1Id": managerLv1Id,
        "managerLV1Name": managerLv1Name,
        "emailManagerLV1": emailManagerLv1,
        "managerLV2Id": managerLv2Id,
        "managerLV2Name": managerLv2Name,
        "emailManagerLV2": emailManagerLv2,
        "startText": startText,
        "endText": endText,
        "createDateText": createDateText,
        "workDateText": workDateText,
        "managerLV1ApproveDateText": managerLv1ApproveDateText,
        "managerLV2ApproveDateText": managerLv2ApproveDateText,
      };
}
