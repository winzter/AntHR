import 'dart:convert';
import '../../domain/entities/entities.dart';

List<LeaveModel> leaveFromJson(String str) =>
    List<LeaveModel>.from(json.decode(str).map((x) => LeaveModel.fromJson(x)));

String leaveToJson(List<LeaveModel> data) =>
    json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

class LeaveModel extends LeaveEntity {
  const LeaveModel({
    required int? idLeave,
    required int? idLeaveType,
    required String? description,
    required DateTime? start,
    required DateTime? end,
    required int? idEmp,
    required double? used,
    required int? quota,
    required double? balance,
    required double? remaining,
    required int? idManagerEmployee,
    required dynamic approveDate,
    required dynamic isApprove,
    required int? isFullDay,
    required dynamic workingStart,
    required dynamic workingEnd,
    required int? isActive,
    required DateTime? createDate,
    required int? isWithdraw,
    required String? filename,
    required dynamic commentManager,
    required String? name,
    required String? firstname,
    required String? lastname,
    required dynamic positionsName,
    required dynamic departmentName,
    required String? managerName,
    required String? managerEmail,
    required String? startText,
    required String? endText,
    required dynamic approveDateText,
    required String? createDateText,
  }) : super(
            idLeave: idLeave,
            idLeaveType: idLeaveType,
            description: description,
            start: start,
            end: end,
            idEmp: idEmp,
            used: used,
            quota: quota,
            balance: balance,
            remaining: remaining,
            idManagerEmployee: idManagerEmployee,
            approveDate: approveDate,
            isApprove: isApprove,
            isFullDay: isFullDay,
            workingStart: workingStart,
            workingEnd: workingEnd,
            isActive: isActive,
            createDate: createDate,
            isWithdraw: isWithdraw,
            filename: filename,
            commentManager: commentManager,
            name: name,
            firstname: firstname,
            lastname: lastname,
            positionsName: positionsName,
            departmentName: departmentName,
            managerName: managerName,
            managerEmail: managerEmail,
            startText: startText,
            endText: endText,
            approveDateText: approveDateText,
            createDateText: createDateText);

  factory LeaveModel.fromJson(Map<String, dynamic> json) => LeaveModel(
        idLeave: json["idLeave"],
        idLeaveType: json["idLeaveType"],
        description: json["description"],
        start: json["start"] == null ? null : DateTime.parse(json["start"]),
        end: json["end"] == null ? null : DateTime.parse(json["end"]),
        idEmp: json["idEmp"],
        used: json["used"]?.toDouble(),
        quota: json["quota"],
        balance: json["balance"]?.toDouble(),
        remaining: json["remaining"]?.toDouble(),
        idManagerEmployee: json["idManagerEmployee"],
        approveDate: json["approveDate"],
        isApprove: json["isApprove"],
        isFullDay: json["isFullDay"],
        workingStart: json["workingStart"],
        workingEnd: json["workingEnd"],
        isActive: json["isActive"],
        createDate: json["createDate"] == null
            ? null
            : DateTime.parse(json["createDate"]),
        isWithdraw: json["isWithdraw"],
        filename: json["filename"],
        commentManager: json["commentManager"],
        name: json["name"],
        firstname: json["firstname"],
        lastname: json["lastname"],
        positionsName: json["positionsName"],
        departmentName: json["departmentName"],
        managerName: json["managerName"],
        managerEmail: json["managerEmail"],
        startText: json["startText"],
        endText: json["endText"],
        approveDateText: json["approveDateText"],
        createDateText: json["createDateText"],
      );

  Map<String, dynamic> toJson() => {
        "idLeave": idLeave,
        "idLeaveType": idLeaveType,
        "description": description,
        "start": start?.toIso8601String(),
        "end": end?.toIso8601String(),
        "idEmp": idEmp,
        "used": used,
        "quota": quota,
        "balance": balance,
        "remaining": remaining,
        "idManagerEmployee": idManagerEmployee,
        "approveDate": approveDate,
        "isApprove": isApprove,
        "isFullDay": isFullDay,
        "workingStart": workingStart,
        "workingEnd": workingEnd,
        "isActive": isActive,
        "createDate": createDate?.toIso8601String(),
        "isWithdraw": isWithdraw,
        "filename": filename,
        "commentManager": commentManager,
        "name": name,
        "firstname": firstname,
        "lastname": lastname,
        "positionsName": positionsName,
        "departmentName": departmentName,
        "managerName": managerName,
        "managerEmail": managerEmail,
        "startText": startText,
        "endText": endText,
        "approveDateText": approveDateText,
        "createDateText": createDateText,
      };
}
