import 'dart:convert';
import '../../domain/entity/profile_entity.dart';

ProfileModel profileFromJson(String str) => ProfileModel.fromJson(json.decode(str));

String profileToJson(ProfileModel data) => json.encode(data.toJson());

class ProfileModel extends ProfileEntity{

  const ProfileModel({
    required int? idEmp,
    required String? employeeId,
    required String? title,
    required String? firstname,
    required String? lastname,
    required String? personalId,
    required DateTime? birthday,
    required String? telephoneMobile,
    required String? email,
    required String? emergencyContact,
    required String? emergencyRelationship,
    required String? emergencyPhone,
    required String? address,
    required String? district,
    required String? province,
    required String? areaCode,
    required int? idCompany,
    required int? idVendor,
    required DateTime? hiringDate,
    required int? idPaymentType,
    required String? positionsName,
    required String? sectionName,
    required String? departmentName,
    required String? divisionName,
    required String? companyName,
    required String? jobGroupName,
    required String? vendorName,
    required String? jobLevelName,
    required String? personnelLevelName,
    required String? employeeTypeName,
    required int? managerLv1Id,
    required String? managerLv1Name,
    required String? managerLv1Position,
    required String? managerLv1Email,
    required int? managerLv2Id,
    required String? managerLv2Name,
    required String? managerLv2Position,
    required String? managerLv2Email,
    required List<dynamic>? education,
  }):super(
    idEmp: idEmp,
    employeeId:employeeId,
    title:title,
    firstname:firstname,
    lastname:lastname,
    personalId:personalId,
    birthday:birthday,
    telephoneMobile:telephoneMobile,
    email:email,
    emergencyContact:emergencyContact,
    emergencyRelationship:emergencyRelationship,
    emergencyPhone:emergencyPhone,
    address:address,
    district:district,
    province:province,
    areaCode:areaCode,
    idCompany:idCompany,
    idVendor:idVendor,
    hiringDate:hiringDate,
    idPaymentType:idPaymentType,
    positionsName:positionsName,
    sectionName:sectionName,
    departmentName:departmentName,
    divisionName:divisionName,
    companyName:companyName,
    jobGroupName:jobGroupName,
    vendorName:vendorName,
    jobLevelName:jobLevelName,
    personnelLevelName:personnelLevelName,
    employeeTypeName:employeeTypeName,
    managerLv1Id:managerLv1Id,
    managerLv1Name:managerLv1Name,
    managerLv1Position:managerLv1Position,
    managerLv1Email:managerLv1Email,
    managerLv2Id:managerLv2Id,
    managerLv2Name:managerLv2Name,
    managerLv2Position:managerLv2Position,
    managerLv2Email:managerLv2Email,
    education:education,
  );

  factory ProfileModel.fromJson(Map<String, dynamic> json) => ProfileModel(
    idEmp: json["idEmp"],
    employeeId: json["employeeId"],
    title: json["title"],
    firstname: json["firstname"],
    lastname: json["lastname"],
    personalId: json["personalId"],
    birthday: json["birthday"] == null ? null : DateTime.parse(json["birthday"]),
    telephoneMobile: json["telephoneMobile"],
    email: json["email"],
    emergencyContact: json["emergencyContact"],
    emergencyRelationship: json["emergencyRelationship"],
    emergencyPhone: json["emergencyPhone"],
    address: json["address"],
    district: json["district"],
    province: json["provience"],
    areaCode: json["areaCode"],
    idCompany: json["idCompany"],
    idVendor: json["idVendor"],
    hiringDate: json["hiringDate"] == null ? null : DateTime.parse(json["hiringDate"]),
    idPaymentType: json["idPaymentType"],
    positionsName: json["positionsName"],
    sectionName: json["sectionName"],
    departmentName: json["departmentName"],
    divisionName: json["divisionName"],
    companyName: json["companyName"],
    jobGroupName: json["jobGroupName"],
    vendorName: json["vendorName"],
    jobLevelName: json["jobLevelName"],
    personnelLevelName: json["personnelLevelName"],
    employeeTypeName: json["employeeTypeName"],
    managerLv1Id: json["managerLV1Id"],
    managerLv1Name: json["managerLV1Name"],
    managerLv1Position: json["managerLV1Position"],
    managerLv1Email: json["managerLV1Email"],
    managerLv2Id: json["managerLV2Id"],
    managerLv2Name: json["managerLV2Name"],
    managerLv2Position: json["managerLV2Position"],
    managerLv2Email: json["managerLV2Email"],
    education: json["education"] == null ? [] : List<EducationModel>.from(json["education"]!.map((x) => EducationModel.fromJson(x))),
  );

  Map<String, dynamic> toJson() => {
    "idEmp": idEmp,
    "employeeId": employeeId,
    "title": title,
    "firstname": firstname,
    "lastname": lastname,
    "personalId": personalId,
    "birthday": birthday?.toIso8601String(),
    "telephoneMobile": telephoneMobile,
    "email": email,
    "emergencyContact": emergencyContact,
    "emergencyRelationship": emergencyRelationship,
    "emergencyPhone": emergencyPhone,
    "address": address,
    "district": district,
    "provience": province,
    "areaCode": areaCode,
    "idCompany": idCompany,
    "idVendor": idVendor,
    "hiringDate": hiringDate?.toIso8601String(),
    "idPaymentType": idPaymentType,
    "positionsName": positionsName,
    "sectionName": sectionName,
    "departmentName": departmentName,
    "divisionName": divisionName,
    "companyName": companyName,
    "jobGroupName": jobGroupName,
    "vendorName": vendorName,
    "jobLevelName": jobLevelName,
    "personnelLevelName": personnelLevelName,
    "employeeTypeName": employeeTypeName,
    "managerLV1Id": managerLv1Id,
    "managerLV1Name": managerLv1Name,
    "managerLV1Position": managerLv1Position,
    "managerLV1Email": managerLv1Email,
    "managerLV2Id": managerLv2Id,
    "managerLV2Name": managerLv2Name,
    "managerLV2Position": managerLv2Position,
    "managerLV2Email": managerLv2Email,
    "education": education == null ? [] : List<dynamic>.from(education!.map((x) => x.toJson())),
  };
}

class EducationModel extends EducationEntity{

  const EducationModel({
    required String? degree,
    required String? university,
    required String? faculty,
    required String? major,
    required int? fromYear,
    required int? endYear,
    required String? gpa,
  }):super(
    degree: degree,
    university: university,
    faculty: faculty,
    major: major,
    fromYear: fromYear,
    endYear: endYear,
    gpa: gpa,
  );

  factory EducationModel.fromJson(Map<String, dynamic> json) => EducationModel(
    degree: json["degree"],
    university: json["university"],
    faculty: json["faculty"],
    major: json["major"],
    fromYear: json["fromYear"],
    endYear: json["endYear"],
    gpa: json["gpa"],
  );

  Map<String, dynamic> toJson() => {
    "degree": degree,
    "university": university,
    "faculty": faculty,
    "major": major,
    "fromYear": fromYear,
    "endYear": endYear,
    "gpa": gpa,
  };
}
